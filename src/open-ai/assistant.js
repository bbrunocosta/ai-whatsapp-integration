import { getChatHistory, getCredits, markMessagesAsReplied } from '../data/sqlite-repository.js';
import openAi  from './openai-client.js'
import usageInfo from './info-usage.js'
import brunoInfo from './info-bruno-costa.js'
export default async function({client, venomMessage}) {
    const chatHistory = await getChatHistory(venomMessage.from)
    const isFirstInteraction = !chatHistory.replied.length
    
    if(await getCredits(venomMessage.from) <= 0 ) {
        await client.stopTyping(venomMessage.from)
  
  
        await client.sendText(venomMessage.from, `üò≤ Ops! Parece que voc√™ atingiu o meu limite de uso... 
      
      Eu adoraria continuar essa conversa, mas, por enquanto, n√£o posso mais interagir. Mas olha, se gostou do que viu por aqui, que tal entrar em contato com o Bruno üì©ü•πüôèüèº? 
      Ele me criou e est√° pronto para novos desafios.
      `)
        await client.sendText(
          venomMessage.from,
          `üßëüèª‚Äçüíª +55 11 95996-3068\nhttps://linkedin.com/in/bbrunocosta`
        );
      
      
        await client.sendText(venomMessage.from, `Deixei o LinkedIn e o telefone dele para voc√™s se falarem, ok?!‚òéÔ∏è \n\nObrigado, foi incr√≠vel conversar com voc√™! üöÄü§ñ`)
        return;
    }


    const options = {
        model: "gpt-4o-mini",
        messages: [
            {role: 'system', content: [
            {type: 'text', text: 'Voc√™ √© o Atlas, uma IA criada para demonstrar as habilidades de desenvolvimento do Bruno Costa em integra√ß√µes de IA'},
            {type: 'text', text: 'Voc√™ deve! mencionar o Bruno quando perguntarem quem √© voc√™'},
            {type: 'text', text: 'Voc√™ √© capaz de responder perguntas sobre diversos assuntos e gerar imagens.'},
            {type: 'text', text: 'Voc√™ esta falando em uma conversa no whatsapp!'},

            {type: 'text', text: 'Quando for falar do Bruno Costa, foque em tecnologias, experi√™ncia em liderar, projetos do total zero √† produ√ß√£o e onboading de novos devs,  n√£o foque em transi√ß√£o de carreira!'},
            {type: 'text', text: ''},
            {type: 'text', text: 'Para isso, Abaixo um pequeno contexto sobre o que vc precisa saber para estar nessa conversa.'},
            {type: 'text', text: 'Com base no contexto abaixo responda o que o usu√°rio quer saber sem mensionar nada do contexto!'},
            {type: 'text', text: 'Seja coeso nas suas respostas e n√£o invente informa√ß√µes e n√£o fique.'},
            {type: 'text', text: 'Informa√ß√µes do Bruno Costa: ' + brunoInfo},
            {type: 'text', text: 'Voc√™ estam em S√£o Paulo - Brasil'},
            {type: 'text', text: 'Uso e limites:' + usageInfo},
            {type: 'text', text: 'Data e Hora: ' + new Date().toLocaleString("pt-BR", { timeZone: "America/Sao_Paulo" })},
            {type: 'text', text: 'Quando perguntar a hora responda: Agora s√£o + hora'},
            {type: 'text', text: 'Responda em linguagem natural profissional e objetiva. Evite mensagens de despedida ou ofertas de ajuda adicionais.'},
            {type: 'text', text: 'Caso seja solicitado algo al√©m do seu alcance ou sabedoria, convide o usu√°rio a entrar em contato com o Bruno para alinhar a possibilidade da solicita√ß√£o'},
            {type: 'text', text: 'O chat come√ßa abaixo!'}
            ]},
            ...chatHistory.replied.map(({role, content}) => ({role, content})),
            ...chatHistory.notReplied.map(({role, content}) => ({role, content})),
            ...isFirstInteraction ? ([
                {
                    role: 'system', content: 'Essa √© sua imprimeira intera√ß√£o com o us√∫ario. Fa√ßa uma apresenta√ß√£o dizendo quem √© voc√™.' 
                }
            ]): []
        ],
        temperature: 1,
        max_tokens: 4000
    };

    await client.startTyping(venomMessage.from)
    const response = await openAi.chat.completions.create(options);

    const amountSpent = await calculateAndSaveUsage(venomMessage, options,response)
    if(exceedUsage(amountSpent)) {
        await notifyLimitReached(client, venomMessage)
        return;
    }



    const message = response.choices?.[0]?.message;
    if(!message.function_call)
    {
        await client.stopTyping(venomMessage.from)
        await  client.sendText(venomMessage.from, message.content)
        await markMessagesAsReplied(venomMessage.from)
        return;
    }

    const action = functions.get(message.function_call.name)
    action.call({...JSON.parse(message.function_call.arguments), client, venomMessage})
}



